# -*- coding: utf-8 -*-
"""National Egyptian ID_OCR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/national-egyptian-id-ocr-018a74aa-c2a3-41c9-bdc4-dbfad13d2bb0.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241119/auto/storage/goog4_request%26X-Goog-Date%3D20241119T012546Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D58ba4037acf90a46be1efce5d2b98f9e02037d34f6378e1686d4d3f3782aacd626d802d6bdcc7f60fe15852d151b66ad822e3a268e5c935087bc3dfcf2f7db63fd860a378456730674a1b712593a32d515ecb6136c7ccbb151ba8060e1ee079eeaa1d77d7f59a1a3841c45a3164671d4de70977fbe1caa118917480fce70d2192e51eaa15503cf4a7a62c391a090b7ab15fb4d6c16164ce648cdcf5290e76f35aa772fe2d64ef3480f02c27da75d95adc7323ad8ae7a7e4152c4442f6ab30ddd4c76687553519ccc27e613a87b8297ad3a45ab05959d62b6f324c3a2f021dbece100b14a045736bfead9e33c6e270e3733329362e8ad08dccf800e0ba4518250
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

fatmasaeed123_id_dataset_path = kagglehub.dataset_download('fatmasaeed123/id-dataset')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

!pip install pytesseract opencv-python pillow

!sudo apt-get update
!sudo apt-get install -y tesseract-ocr

!pip install pytesseract

!tesseract --version

# Step 1: Install Required Libraries
!sudo apt-get update
!sudo apt-get install -y tesseract-ocr tesseract-ocr-ara
!pip install pytesseract opencv-python

# Step 2: Import Libraries
import cv2
import pytesseract
import matplotlib.pyplot as plt
import re

# Configure Tesseract
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

# Step 3: Load Front and Back Images
front_image_path = '/kaggle/input/id-dataset/front.png'  # Update this with the correct path
back_image_path = '/kaggle/input/id-dataset/back.png'    # Update this with the correct path

front_image = cv2.imread(front_image_path)
back_image = cv2.imread(back_image_path)

# Step 4: Preprocessing Function
def preprocess_image(image):
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply thresholding
    _, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)
    return thresh

# Step 5: OCR Extraction Function
def extract_text(image, lang="ara+eng"):
    processed_image = preprocess_image(image)
    # Perform OCR
    text = pytesseract.image_to_string(processed_image, config='--oem 3 --psm 6', lang=lang)
    return text, processed_image

# Step 6: Extract Text from Front and Back
front_text, front_processed = extract_text(front_image)
back_text, back_processed = extract_text(back_image)

# Step 7: Display Results
print("Front Side Extracted Text:\n", front_text)
print("\nBack Side Extracted Text:\n", back_text)

# Step 8: Display Preprocessed Images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(front_processed, cmap='gray')
plt.title('Front Side Preprocessed')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(back_processed, cmap='gray')
plt.title('Back Side Preprocessed')
plt.axis('off')
plt.show()

# Step 9: Structured Extraction (Optional)
def extract_id_number(text):
    match = re.search(r'\b\d{14}\b', text)
    return match.group() if match else "Not Found"

id_number = extract_id_number(front_text)
print("\nExtracted ID Number:", id_number)

# Example: Save data in a structured format
id_data = {
    "Front_Side_Text": front_text,
    "Back_Side_Text": back_text,
    "ID_Number": id_number
}

# Display the final structured data
print("\nStructured Data:\n", id_data)





